import "pkl:json"
import "package://pkg.pkl-lang.org/pkl-k8s/k8s@1.2.1#/api/core/v1/Secret.pkl"

const gatewayName:           String = "compose-gateway"
const gatewayControllerName: String = "gateway.envoyproxy.io/gatewayclass-controller"
const secretName:            String = "compose-tls-secret"

class Payload {
  name:        String
  networks:    List<Any>
  annotations: Annotations
}

class Annotations {
  `compose.gateway/enabled`:  String
  `compose.gateway/port`:     String
  `compose.gateway/fqdn`:     String
  `compose.gateway/path`:     String = "/"
  `compose.gateway/pathType`: String = "PathPrefix"
}

typealias PortNumber = Int(isBetween(1, 65535))
typealias Fqdn       = String(length <= 253, matches(Regex("[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*")))
typealias Path       = String(startsWith("/"))?
typealias PathType   = "PathPrefix"

// There is probably a clever way to do this
function toRoute(annotations: Annotations) = new Route {
  enabled  = annotations.`compose.gateway/enabled`.toBoolean()
  port     = annotations.`compose.gateway/port`.toInt()
  fqdn     = annotations.`compose.gateway/fqdn`
  path     = annotations.`compose.gateway/path`
  pathType = annotations.`compose.gateway/pathType`
}

class Route {
  enabled:  Boolean
  port:     PortNumber
  fqdn:     Fqdn
  path:     Path       = "/"
  pathType: PathType   = "PathPrefix"
}

class Container {
  name:  String
  ips:   Listing<String>
  route: Route
}

configFile:    String  = read?("prop:config")            ?? "config.yaml"
outputFile:    String  = read?("prop:file")              ?? "resources.yaml"
payloadString: String  = read?("prop:payload")           ?? "[]"
init:          Boolean = read?("prop:init")?.toBoolean() ?? false

payload: Listing = new json.Parser {}
  .parse(payloadString)
  .toList()
  .filter((c) -> c.HostConfig.getPropertyOrNull("Annotations")?.getPropertyOrNull("compose.gateway/enabled") == "true")
  .toListing()

containers: Listing<Container> = new {
  for (_item in payload) {
    new Container {
      name = _item.Name.replaceFirst("/", "")
      ips = _item.NetworkSettings.Networks
        .toMap()
        .fold(List(), (res, _, value) -> res.add(value.IPAddress))
        .toListing()
      route = toRoute(_item.HostConfig.Annotations.toTyped(Annotations))
    }
  }
}

output {
  files {
    when (init) {
      [configFile] {
        value = config
        renderer = new YamlRenderer { isStream = false }
      }
    } else {
      [outputFile] {
        value = gateway.toList() + routes.toList() + List(secret.toDynamic())
        renderer = new YamlRenderer { isStream = true }
      }
    }
  }
}

routes: Listing = new {
  for (_c in containers) {
    new {
      apiVersion = "gateway.envoyproxy.io/v1alpha1"
      kind = "Backend"
      metadata { name = _c.name }
      spec {
        endpoints {
          for (_ip in _c.ips) {
            new {
              ip {
                address = _ip
                port = _c.route.port.toInt()
              }
            }
          }
        }
      }
    }

    new {
      apiVersion = "gateway.networking.k8s.io/v1"
      kind = "HTTPRoute"
      metadata { name = _c.name }
      spec {
        parentRefs { new { name = gatewayName } }
        hostnames = _c.route.fqdn.split(",").map((it) -> it.trim())
        rules {
          new {
            backendRefs {
              new {
                group = "gateway.envoyproxy.io"
                kind = "Backend"
                name = _c.name
              }
            }
            matches {
              new {
                path {
                  type = _c.route.pathType
                  value = _c.route.path
                }
              }
            }
          }
        }
      }
    }
  }
}

ports:       List<PortNumber> = read?("env:COMPOSE_GATEWAY_PORTS")?.split(",")?.map((it) -> it.trim().toInt())        ?? List()
securePorts: List<PortNumber> = read?("env:COMPOSE_GATEWAY_SECURE_PORTS")?.split(",")?.map((it) -> it.trim().toInt()) ?? List()

gateway: Listing = new {
  new {
    apiVersion = "gateway.networking.k8s.io/v1"
    kind = "GatewayClass"
    metadata { name = gatewayName }
    spec { controllerName = gatewayControllerName }
  }

  new {
    apiVersion = "gateway.networking.k8s.io/v1"
    kind = "Gateway"
    metadata { name = gatewayName }
    spec {
      gatewayClassName = gatewayName
      listeners {
        for (_p in ports) {
          new {
            name = "http-\(_p)"
            protocol = "HTTP"
            port = _p
          }
        }
        for (_s in securePorts) {
          new {
            name = "https-\(_s)"
            protocol = "HTTPS"
            hostname = "*.shatokhin.local"
            port = _s
            tls {
              mode = "Terminate"
              certificateRefs {
                new {
                  kind = "Secret"
                  name = "compose-tls-secret"
                }
              }
            }
          }
        }
      }
    }
  }
}

gatewayControllerLogLevel: String = read?("env:COMPOSE_ENVOY_GATEWAY_LOG_LEVEL") ?? "info"

config: Dynamic = new {
  apiVersion = "gateway.envoyproxy.io/v1alpha1"
  kind = "EnvoyGateway"
  gateway { controllerName = gatewayControllerName }
  provider {
    type = "Custom"
    custom {
      resource {
        type = "File"
        file {
          paths {
            "/config/\(outputFile)"
          }
        }
      }
      infrastructure {
        type = "Host"
        host {}
      }
    }
  }
  logging {
    level {
      ["default"] = gatewayControllerLogLevel
    }
  }
  extensionApis { enableBackend = true }
}

crtFile: String = read?("file:\(read?("env:COMPOSE_GATEWAY_TLS_CRT_FILE"))")?.text ?? "no-certificate-provided"
keyFile: String = read?("file:\(read?("env:COMPOSE_GATEWAY_TLS_KEY_FILE"))")?.text ?? "no-certificate-provided"

secret: Secret = new {
  metadata { name = secretName }
  type = "kubernetes.io/tls"
  data {
    ["tls.crt"] = crtFile.base64
    ["tls.key"] = keyFile.base64
  }
}
